<menu text="Mainmenu" title="Main menu">
	<id val="mainmenu" />
<!-- the following types are allowed:
	<screen [module="mod"] [screen="classname"]>[arguments]</screen>
		executes Screen called "classname" from module "Screen.mod"
		if no module is given, Screen must be globally available.
		if no screen is given, module is used as screen class name.
		arguments must be comma seperated (will be fed to eval), and can
			use stuff from module
		(of course you must specify at least one of module, screen.)
	<setup id="id" />
		opens a setup with specified id
	<code> .. code .. </code>
		"exec"s code
-->
		<menu level="0" text="Timers" entryID="timer_menu">
			<id val="timermenu" />
			<item weight="100" level="0" text="CronTimers" entryID="crontimer_edit"><screen module="CronTimer" screen="CronTimers" /></item>
			<item weight="100" level="0" text="Timers" entryID="timer_edit"><screen module="TimerEdit" screen="TimerEditList" /></item>
			<item weight="100" level="0" text="PowerTimers" entryID="powertimer_edit"><screen module="PowerTimerEdit" screen="PowerTimerEditList" /></item>
		</menu>
		<item level="1" text="VCR scart" entryID="scart_switch" configcondition="config.usage.show_vcr_scart" requires="ScartSwitch"><code>self.session.scart.VCRSbChanged(3)</code></item>

		<menu level="0" text="Information" entryID="info_screen">
			<id val="information" />
			<item level="0" text="About" entryID="about_screen"><screen module="About" screen="About"/></item>
			<item level="0" text="Devices" entryID="device_screen"><screen module="About" screen="Devices"/></item>
			<item level="0" text="Memory" entryID="device_screen"><screen module="About" screen="SystemMemoryInfo"/></item>
			<item level="0" text="Network" entryID="device_screen"><screen module="About" screen="SystemNetworkInfo"/></item>
			<item level="1" text="Service" entryID="service_info_screen"><screen module="ServiceInfo" screen="ServiceInfo"/></item>
		</menu>

		<item level="1" text="Plugins" entryID="plugin_selection"><screen module="PluginBrowser" screen="PluginBrowser" /></item>
		<menu level="0" text="Setup" flushConfigOnClose="1" entryID="setup_selection" >
			<id val="setup" />
			<menu weight="7" level="0" text="Service searching" entryID="service_searching_selection">
				<id val="scan" />
				<item weight="10" text="Tuner configuration" entryID="tuner_setup"><screen module="Satconfig" screen="NimSelection" /></item>
				<item weight="20" text="Automatic scan" entryID="auto_scan"><screen module="ScanSetup" screen="ScanSimple" /></item>
				<item weight="30" text="Manual scan" entryID="manual_scan"><screen module="ScanSetup" /></item>
			</menu>
			<menu weight="5" level="0" text="System" entryID="system_selection">
				<id val="system" />
				<item weight="10" text="A/V settings" entryID="av_setup"><screen module="VideoMode" screen="VideoSetup" /></item>
				<item level="1" entryID="autolanguage_setup"><setup id="autolanguagesetup" /></item>
				<item level="0" entryID="remote_setup"><setup id="remotesetup"/></item>
				<item level="0" entryID="usage_setup"><setup id="usage" /></item>
				<item level="0" entryID="channelselection_setup"><setup id="channelselection" /></item>
				<menu level="0" text="Extended System" entryID="extended_selection">
					<id val="extended" />
				<menu level="0" text="Display" entryID="display_selection" requires="Display">
					<id val="display" />
					<item level="0" entryID="display_setup"><setup id="display" /></item>
					<item level="0" text="Skin setup" entryID="lcd_skin_setup"><screen module="SkinSelector" screen="LcdSkinSelector"/></item>
				</menu>
				<item level="0" entryID="specialfeatures_menu"><setup id="specialfeatures" /></item>
				<item level="0" text="Timeshift settings" entryID="timshift_setup"><screen module="Timershift" screen="TimeshiftSettings" /></item>
				<item level="0" text="Recording settings" entryID="recording_setup"><screen module="Recordings" screen="RecordingSettings" /></item>
				<item level="1" text="Input devices" entryID="input_device_setup"><screen module="InputDeviceSetup" screen="InputDeviceSelection" /></item>
				<item text="Keyboard"><setup id="keyboard" /></item>
				<item level="0" entryID="time_setup"><setup id="time"/></item>
				<item level="0" entryID="logs_setup"><setup id="logs" /></item>
				<menu level="2" text="OSD settings" entryID="osd_setup" requires="OsdMenu">
					<id val="osd_menu" />
					<item level="0" entryID="user_interface"><setup id="userinterface" /></item>
					<item level="2" text="OSD Position" entryID="osdsetup" requires="OsdSetup"><screen module="UserInterfacePositioner" screen="UserInterfacePositioner2"/></item>
					<item level="2" text="OSD 3D Setup" entryID="osd3dsetup" requires="CanChange3DOsd"><screen module="UserInterfacePositioner" screen="OSD3DSetupScreen"/></item>
				</menu>
				<menu level="0" text="Storage devices" entryID="hardisk_selection" requires="Harddisk">
					<id val="harddisk" />
					<item level="1" entryID="harddisk_setup"><setup id="harddisk"/></item>
					<item level="0" text="Initialization" entryID="harddisk_init"><screen module="HarddiskSetup" screen="HarddiskSelection"/></item>
					<item level="0" text="Filesystem Check" entryID="harddisk_check"><screen module="HarddiskSetup" screen="HarddiskFsckSelection"/></item>
					<item level="0" text="Convert ext3 filesystem to ext4" entryID="harddisk_convert" requires="ext4"><screen module="HarddiskSetup" screen="HarddiskConvertExt4Selection"/></item>
				</menu>
				<menu level="2" text="EPG" entryID="epg_menu">
					<id val="epg" />
					<item level="0" entryID="epg_setup"><setup id="epgsettings" /></item>
					<menu level="2" text="Load/Save" entryID="epgloadsave_menu">
						<id val="epgloadsave_menu" />
						<item level="0" entryID="saveepgcache" text="Save EPG">
<code>
from Components.EpgLoadSave import EpgSaveMsg
def msgClosed(ret):
	if ret:
		from enigma import eEPGCache
		epgcache = eEPGCache.getInstance()
		epgcache.save()
self.session.openWithCallback(msgClosed, EpgSaveMsg)
</code>
						</item>
						<item level="0" entryID="loadepgcache" text="Load EPG">
<code>
from Components.EpgLoadSave import EpgLoadMsg
def msgClosed(ret):
	if ret:
		from enigma import eEPGCache
		epgcache = eEPGCache.getInstance()
		epgcache.load()
self.session.openWithCallback(msgClosed, EpgLoadMsg)
</code>
						</item>
					</menu>
					<item level="2" entryID="setup_epgmulti"><setup id="epgmulti" /></item>
					<item level="2" entryID="setup_epgenhanced"><setup id="epgenhanced" /></item>
					<item level="2" entryID="setup_epginfobar"><setup id="epginfobar" /></item>
					<item level="2" entryID="setup_epginfobargraphical"><setup id="epginfobargraphical" /></item>
					<item level="2" entryID="setup_epggraphical"><setup id="epggraphical" /></item>
				</menu>
				<item level="0" text="HDMI CEC" entryID="hdmicec" requires="HDMICEC">
<code>
from Plugins.SystemPlugins.HdmiCEC.plugin import HdmiCECSetupScreen
self.session.open(HdmiCECSetupScreen)
</code>
				</item>
				<item level="1" entryID="rfmod_setup" requires="RfModulator"><setup id="RFmod"/></item>
				<item level="2" entryID="subtitle_setup"><setup id="subtitlesetup" /></item>
				<item level="1" text="Remote Control Code" entryID="remotecode" requires="RemoteCode">
<code>
from Plugins.SystemPlugins.RemoteControlCode.plugin import RemoteControlCode
self.session.open(RemoteControlCode)
</code>
				</item>
				<item level="0" entryID="dvdplayer_setup"><setup id="dvdplayer" /></item>
				</menu>
				<item level="0" text="Language" entryID="language_setup"><screen module="LanguageSelection" /></item>
				<menu level="0" text="Network" entryID="network_menu">
					<id val="network" />
					<item level="0" text="Device Setup" entryID="device_setup"><screen module="NetworkSetup" screen="NetworkAdapterSelection"/></item>
					<item level="1" text="Mounts Setup" entryID="netmounts_setup"><screen module="NetworkSetup" screen="NetworkMountsMenu"/></item>
					<item level="2" text="AFP Setup" entryID="netafp_setup"><screen module="NetworkSetup" screen="NetworkAfp"/></item>
					<item level="2" text="FTP Setup" entryID="netftp_setup"><screen module="NetworkSetup" screen="NetworkFtp"/></item>
					<item level="2" text="Inadyn Setup" entryID="Inadyn_setup"><screen module="NetworkSetup" screen="NetworkInadyn"/></item>
					<item level="2" text="MiniDLNA Setup" entryID="netushare_setup"><screen module="NetworkSetup" screen="NetworkMiniDLNA"/></item>
					<item level="2" text="NFS Setup" entryID="netnfs_setup"><screen module="NetworkSetup" screen="NetworkNfs"/></item>
					<item level="2" text="OpenVPN Setup" entryID="netvpn_setup"><screen module="NetworkSetup" screen="NetworkOpenvpn"/></item>
					<item level="2" text="SABnzbd Setup" entryID="netsabnzbd_setup"><screen module="NetworkSetup" screen="NetworkSABnzbd"/></item>
					<item level="2" text="Samba Setup" entryID="netsmba_setup"><screen module="NetworkSetup" screen="NetworkSamba"/></item>
					<item level="2" text="Telnet Setup" entryID="nettelnet_setup"><screen module="NetworkSetup" screen="NetworkTelnet"/></item>
					<item level="2" text="uShare Setup" entryID="netushare_setup"><screen module="NetworkSetup" screen="NetworkuShare"/></item>
				</menu>
				<item level="0" text="Skin Setup" entryID="skin_setup"><screen module="SkinSelector" screen="SkinSelector"/></item>

			</menu>
			<item weight="10" level="1" text="Common Interface" entryID="ci_setup" requires="CommonInterface"><screen module="Ci" screen="CiSelection" /></item>
			<item weight="15" level="0" text="Parental control" entryID="parental_setup"><screen module="ParentalControlSetup" screen="ParentalControlSetup" /></item>
			<item weight="25" level="0" text="Factory reset" entryID="factory_reset">
<code>
from Screens.FactoryReset import FactoryReset
def msgClosed(ret):
	if ret:
		from os import system, _exit
		print"[FACTORY RESET] remove dir /etc/enigma2"
		system("rm -R /etc/enigma2")
		print"[FACTORY RESET] set network to DHCP"
		system("cp -f /usr/share/enigma2/defaults/interfaces /etc/network/interfaces")
		system("/etc/init.d/networking restart")
		_exit(0)
self.session.openWithCallback(msgClosed, FactoryReset)
</code>
			</item>
	</menu>
		<menu text="Standby / Restart" entryID="standby_restart_list">
			<id val="shutdown" />
			<item text="Deep Standby" requires="DeepstandbySupport" entryID="deep_standby">
<code>
from Screens.Standby import TryQuitMainloop
from Screens.MessageBox import MessageBox
recordings = self.session.nav.getRecordings()
if recordings:
	lastrecordEnd = 0
	for timer in self.session.nav.RecordTimer.timer_list:
		if lastrecordEnd == 0 or lastrecordEnd >= timer.begin:
			print "Set after-event for recording %s to DEEP-STANDBY." % timer.name
			timer.afterEvent = 2
			if timer.end > lastrecordEnd:
				lastrecordEnd = timer.end + 900
	self.session.openWithCallback(self.gotoStandby,MessageBox,_("PowerOff while Recording in progress!\nEntering standby, after recording the box will shutdown."), type = MessageBox.TYPE_INFO, timeout = 10)
else:
	self.session.open(TryQuitMainloop, 1)
</code>			
			</item>
			<item text="WOL Standby" requires="GBWOL" entryID="deep_standby">
<code>
from Screens.Standby import TryQuitMainloop
from Screens.MessageBox import MessageBox
recordings = self.session.nav.getRecordings()
if recordings:
	lastrecordEnd = 0
	for timer in self.session.nav.RecordTimer.timer_list:
		if lastrecordEnd == 0 or lastrecordEnd >= timer.begin:
			print "Set after-event for recording %s to DEEP-STANDBY." % timer.name
			timer.afterEvent = 2
			if timer.end > lastrecordEnd:
				lastrecordEnd = timer.end + 900
	self.session.openWithCallback(self.gotoStandby,MessageBox,_("PowerOff while Recording in progress!\nEntering standby, after recording the box will shutdown."), type = MessageBox.TYPE_INFO, timeout = 10)
else:
	self.session.open(TryQuitMainloop, 45)
</code>			
			</item>			
			<item text="Standby" entryID="standby"><screen module="Standby" screen="Standby"/></item>
			<item text="Restart" entryID="restart"><screen module="Standby" screen="TryQuitMainloop">2</screen></item>
			<item text="PowerTimers" entryID="powertimer_edit"><screen module="PowerTimerEdit" screen="PowerTimerEditList" /></item>
			<item text="Restart Gui" entryID="restart_enigma"><screen module="Standby" screen="TryQuitMainloop">3</screen></item>
			<item text="Shutdown" requires="!DeepstandbySupport" entryID="deep_standby"><screen module="Standby" screen="TryQuitMainloop">1</screen></item>
		</menu>
</menu>
